@{
    ViewData["Title"] = "Home Page";
}
@section Styles {
    <style>
        h1 {
            color: green
        }
    </style>
}

<div class="text-center">
    <h1 class="display-4">Welcome</h1>
    <p>Learn about <a href="https://learn.microsoft.com/aspnet/core">building Web apps with ASP.NET Core</a>.</p>
</div>

@section Scripts {
    <script>

        //IIFE 立即執行函式
        // (() => { })();

        (async () => {
            let data = await printSomething("A")
                console.log(data)
                data = await printSomething("B")
                console.log(data)
                data = await printSomething("C")
                console.log(data)
                data = await printSomething("D")
                console.log(data)
        })();


        // setTimeout(function () {
        //     console.log('A');
        //     setTimeout(function () {
        //         console.log('B');
        //         setTimeout(function () {
        //             console.log('C');
        //         }, 1000);
        //     }, 1000);
        // }, 1000);

        function printSomething(data) {
            const promise = new Promise((resolve, reject) => {
                //非同步的程式碼
                setTimeout(() => {
                    resolve(data)
                },1000)
            })
            return promise
        }

        // printSomething("A")
        //    .then(data => {
        //        console.log(data)
        //        return printSomething("B")
        //    })
        //    .then(data => {
        //         console.log(data)
        //         return printSomething("C")
        //     })
        //     .then(data => {
        //         console.log(data)
        //         return printSomething("D")
        //     })
        //     .then(data => {
        //         console.log(data)               
        //     })

        // async await  寫非同步程式就跟同步一樣
        // async function callPromise() {
        //     let data = await printSomething("A")
        //     console.log(data)
        //     data = await printSomething("B")
        //     console.log(data)
        //     data = await printSomething("C")
        //     console.log(data)
        //     data = await printSomething("D")
        //     console.log(data)
        // }

        // callPromise()

   
        


        // // 建立 Promise 物件
        // const promise = new Promise((resolve, reject) => {
        //    //非同步的程式碼
        //     if (false) {
        //         resolve('成功')
        //     } else {
        //         reject('失敗')
        //     }
        // })
        // console.log(promise)

        // //怎麼使用 promise
        // promise
        // .then(result => console.log(result))
        // .catch(error => console.log(error))
        // .finally(() => console.log('結束'))



    </script>
}

